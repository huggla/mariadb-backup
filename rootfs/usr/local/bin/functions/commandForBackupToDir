commandForBackupToDir(){
   local backupDir=$1
   local IFS=$(echo -en "\n\b,")
   local database=""
   local dumpCmd="find \"$backupDir/\" -mindepth 1 -maxdepth 1 -type d -exec rm -r {} \;"
   local delimiter='&&'
   local format=""
   local file=""
   local jobs=""
   local clean=""
   local xschemas=""
   local xschema=""
   local schemas=""
   local schema=""
   local xtables=""
   local xtable=""
   local tables=""
   local table=""
   if [ -z "$VAR_DATABASES" ]
   then
      dumpCmd="/usr/local/bin/mysqldump --defaults-extra-file=/run/mysqldumpPw --net_buffer_length=5000 --skip-dump-date --host=$VAR_HOST --port=$VAR_PORT --socket=$VAR_SOCKET --user=$VAR_LINUX_USER --all-databases > \"$backupDir/all-databases\""
   else
      for database in $VAR_DATABASES
      do
         database="$(trim $database)"
         file="$backupDir/$database"
         dumpCmd="$dumpCmd $delimiter /usr/local/bin/mysqldump --defaults-extra-file=/run/mysqldumpPw --net_buffer_length=5000 --skip-dump-date --host=$VAR_HOST --port=$VAR_PORT --socket=$VAR_SOCKET --user=$VAR_LINUX_USER --tab=$file"
         eval "drop=\$VAR_$database_drop"
         if [ "$drop" != "no" ]
         then
            if [ "$drop" == "yes" ] || [ "$VAR_DROP" == "yes" ]
            then
               dumpCmd="$dumpCmd --add-drop-trigger"
            fi
         fi
         eval "nodata=\$VAR_$database_nodata"
         if [ "$nodata" != "no" ]
         then
            if [ "$nodata" == "yes" ] || [ "$VAR_NODATA" == "yes" ]
            then
               dumpCmd="$dumpCmd --no-data"
            fi
         fi
         eval "igntables=\$VAR_$database_igntables"
         for table in $igntables
         do
            table="$(trim table)"
            dumpCmd="$dumpCmd --ignore-table=$table"
         done
         dumpCmd="$dumpCmd $database"
         eval "tables=\$VAR_$database_tables"
         for table in $tables
         do
            table="$(trim table)"
            dumpCmd="$dumpCmd $table"
         done
         for table in $VAR_TABLES
         do
            table="$(trim table)"
            dumpCmd="$dumpCmd $table"
         done
      done
   fi
   echo "$dumpCmd"
}
